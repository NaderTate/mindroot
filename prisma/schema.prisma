generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Admin
  User
}

enum Plan {
  Free
  Pro
  Enterprise
}

enum ProjectStatus {
  notStarted
  inProgress
  completed
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  image                 String?
  password              String?
  role                  Role                   @default(User)
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
  categories            Category[]
  createdTeams          Team[]                 @relation("leader")
  joinedTeams           Team[]                 @relation("member")
  projects              Project[]
  plan                  Plan                   @default(Free)
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Comment               Comment[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Team {
  id        String    @id @default(cuid())
  name      String
  leader    User      @relation("leader", fields: [userId], references: [id])
  members   User[]    @relation("member")
  projects  Project[]
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id          String     @id @default(cuid())
  name        String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  teams       Team[]
  categories  Category[]
  comments    Comment[]
  deadline    DateTime?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}
